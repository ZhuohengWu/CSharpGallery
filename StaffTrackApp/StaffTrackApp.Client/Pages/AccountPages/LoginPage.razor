@using StaffTrackApp.Client.Pages.GeneralPages
@using Syncfusion.Blazor.Popups
@page "/identity/account/login"
@layout AuthenticationLayout
@inject SfDialogService DialogService
<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="card bg-white d-flex justify-content-center" style="opacity:0.8; margin-top:50%; border-radius:10px; color:black; font-weight:bold">
                    <div class="card-header text-center fs-5 mb-2">Login</div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-3"></div>
                            <div class="col-lg-6 col-md-6 col-sm-6 d-flex justify-content-center">
                                <img style="border-radius:20px" src="../images/logos/feather.png" height="50" width="50" />
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="mt-3">
                            <label class="form-label" for="email">Email</label>
                            <InputText id="email" @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="mt-3">
                            <label class="form-label" for="password">Password</label>
                            <InputText id="password" type="password" @bind-Value="User.Password" class="form-control"></InputText>
                        </div>
                        <div class="mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-outline-primary float-end" type="submit">Login</button>
                            }                            
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Don't have account?
                            <a class="btn-link" href="identity/account/register">Sign Up</a>
                        </span>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-4"></div>
    </div>
</div>

@code {
    public bool ShowLoadingButton { get; set; } = false;
    Login User = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    private async Task HandleLogin()
    {
        ShowLoadingButton = true;
        var result = await accountService.SignInAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Login Success");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
            {
                Token = result.Token,
                RefreshToken = result.RefreshToken
            });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }

        ShowLoadingButton = false;
    }

    private async Task DisplayDialog(string content, string title)
    {
        var options = new DialogOptions
            {
                Width = "400px",
                Height = "200px",
                Position = new() {X = "center", Y = "center"},
                ShowCloseIcon = true,
                ZIndex = 1000 // Ensures it appears on top
            };

        await DialogService.AlertAsync(content, title);
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (!isUserAuthenticated)
            NavManager.NavigateTo("identity/account/login");
    }
}
