@implements IDisposable
@if (allState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeBtnClicked">
                                <i class="bi bi-plus-circle-dotted">Add Employee</i>
                            </button>
                        </div>
                        <div class="card-body">
                            <SfGrid DataSource="@Employees">
                                <GridColumns>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div class="image">
                                                    <img src="@employee!.Photo" alt="@employee.Name" width="150" height="150" />
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(Employee.CivilId) HeaderText="Civil Id"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.FileNumber) HeaderText="File Number"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.PhoneNumber) HeaderText="Telephone"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.JobName) HeaderText="Job Name"></GridColumn>
                                    <GridColumn Field="Branch.Name" HeaderText="Branch"></GridColumn>
                                    <GridColumn Field="Town.Name" HeaderText="Town"></GridColumn>
                                    <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left" >
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle"
                                                    @onclick="() => ShowMenuPopUp(employee!)">
                                                </i>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        <div class="card-footer">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
    ShowAddOrUpdateEmployee="ShowAddOrUpdatePage" 
    Employee="Employee"
    NotifyParentFormClosedClicked="NotifyParentFormClosedClicked"
    Countries="DefaultCountries" Cities="SelectedCities" Towns="SelectedTowns"
    GeneralDepartments="DefaultGeneralDepartments" Departments="SelectedDepartments" Branches="SelectedBranches"
    HandleCountrySelectedEvent="HandleCountrySelectedEvent"
    HandleCitySelectedEvent="HandleCitySelectedEvent"
    HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
    HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
    HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent" />

<ContextMenu @ref="contextMenu"
             HandleViewClicked="ViewClicked"
             HandleEditClicked="EditClicked"
             HandleDeleteClicked="DeleteClicked"
             HandleAddVacationClicked="AddVacationClicked"
             HandleAddOvertimeClicked="AddOvertimeClicked"
             HandleAddHealthClicked="AddHealthClicked"
             HandleAddSanctionClicked="AddSanctionClicked"
             />

<EmployeeDetailPage EmployeeDetails="Employee" 
    ShowDetailsPage="ShowDetailsPage"
    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />

<DoctorDialog @ref="doctorDialog" 
    HandleSaveOperationEvent="SaveHealthEvent"
    Doctor="doctor"/>

<OvertimeDialog @ref="overtimeDialog"
    HandleSaveOperationEvent="SaveOvertimeEvent"
    ItemModel="overtime"
    OvertimeTypes="overtimeTypes"/>

<SanctionDialog @ref="sanctionDialog" 
    ItemModel="sanction"
    SanctionTypes="sanctionTypes"
    HandleSaveOperationEvent="SaveSanctionEvent" />

<VacationDialog @ref="vacationDialog"
                ItemModel="vacation"
                VacationTypes="vacationTypes"
                HandleSaveOperationEvent="SaveVacationEvent" />

@code {
    public Employee Employee { get; set; } = new();
    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<City> SelectedCities { get; set; } = [];
    public List<Town> SelectedTowns { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];

    AddOrUpdateEmployeePage? addOrUpdateEmployee;

    public List<Employee> Employees { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadDefaults();
        await LoadEmployees();
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private void HandleCountrySelectedEvent(int countryId)
    => SelectedCities = DefaultCities.Where(_ => _.CountryId == countryId).ToList();

    private void HandleCitySelectedEvent(int cityId)
    => SelectedTowns = DefaultTowns.Where(_ => _.CityId == cityId).ToList();

    private void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId)
    => SelectedDepartments = DefaultDepartments.Where(_ => _.GeneralDepartmentId == generalDepartmentId).ToList();

    private void HandleDepartmentSelectedEvent(int departmentId)
    => SelectedBranches = DefaultBranches.Where(_ => _.DepartmentId == departmentId).ToList();

    private async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCk = false;
        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCk = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCk = await DisplayMessage(result.Flag, result.Message);
        }

        if (successCk) addOrUpdateEmployee!.ClearContent();
    }

    private async Task NotifyParentFormClosedClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }

    private async Task LoadEmployees()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    private void ShowAddOrUpdateEmployeeBtnClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    public Employee SelectedEmployee { get; set; } = new();
    ContextMenu? contextMenu;
    private void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }
    private void EditClicked()
    {
        addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployee!.EmployeeGroup1.PhoneNumber = SelectedEmployee.PhoneNumber;
        addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo;
        addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
        addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Other;

        addOrUpdateEmployee!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
        addOrUpdateEmployee!.Department = SelectedEmployee.Branch!.Department!.Name;
        addOrUpdateEmployee!.Branch = SelectedEmployee.Branch!.Name;

        addOrUpdateEmployee!.Country = SelectedEmployee.Town!.City!.Country!.Name;
        addOrUpdateEmployee!.City = SelectedEmployee.Town!.City!.Name;
        addOrUpdateEmployee!.Town = SelectedEmployee.Town!.Name;

        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }
    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure to delete {SelectedEmployee.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await branchService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }
    public bool ShowDetailsPage { get; set; } = false;
    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }
    private void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }

    DoctorDialog? doctorDialog;
    Doctor doctor = new();
    private void AddHealthClicked()
    {
        doctor.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        doctorDialog!.OpenDialog();
    }

    private async Task SaveHealthEvent(Doctor item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            doctor = new();
            doctorDialog!.CloseDialog();
        }
    }
    OvertimeDialog? overtimeDialog;
    Overtime overtime = new();
    List<OvertimeType> overtimeTypes = [];
    private void AddOvertimeClicked()
    {
        overtime.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        overtimeDialog!.OpenDialog();
    }

    private async Task SaveOvertimeEvent(Overtime item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            overtime = new();
            overtimeDialog!.CloseDialog();
        }
    }

    SanctionDialog? sanctionDialog;
    Sanction sanction = new();
    List<SanctionType> sanctionTypes = [];
    private void AddSanctionClicked()
    {
        sanction.EmployeeId = SelectedEmployee.Id;
        contextMenu.CloseContextMenu();
        sanctionDialog!.OpenDialog();
    }

    private async Task SaveSanctionEvent(Sanction item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await sanctionService.Insert(item, Constants.SanctionBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            sanction = new();
            sanctionDialog!.CloseDialog();
        }
    }

    VacationDialog? vacationDialog;
    Vacation vacation = new();
    List<VacationType> vacationTypes = [];
    private void AddVacationClicked()
    {
        vacation.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        vacationDialog!.OpenDialog();
    }

    private async Task SaveVacationEvent(Vacation item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            vacation = new();
            vacationDialog!.CloseDialog();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Operation Success");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
