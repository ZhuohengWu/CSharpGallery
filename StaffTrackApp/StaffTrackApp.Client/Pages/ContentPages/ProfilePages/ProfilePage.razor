@using System.Security.Claims
@implements IDisposable
@if (allState.ShowUserProfile)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-3"></div>
            <div class="col-lg-6">
                <EditForm Model="userProfileState.UserProfile" OnValidSubmit="UpdateProfile">
                    <DataAnnotationsValidator />
                    <div class="card border-success shadow-lg">
                        <div class="card-header">Personal Information</div>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col-lg-3"></div>
                                    <div class="col-lg-6 d-flex justify-content-center">
                                        <div class="vstack gap-2">
                                            <img style="width:100px;height:100px;border-radius:50%" src="@userProfileState.UserProfile.Image" />
                                            <InputFile OnChange="UploadImage" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-lg-3"></div>
                                </div>
                            </div>
                            <div class="mt-2">
                                <label class="form-label">Id</label>
                                <input type="text" value="@userProfileState.UserProfile.Id" class="form-control" disabled />
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="@userProfileState.UserProfile.Name" class="form-control" />
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Email Address</label>
                                <input type="email" @bind="@userProfileState.UserProfile.Email" class="form-control" />
                            </div>
                            <div class="mt-4">
                                @if (ShowSpinner){
                                    <ButtonLoadingSpinner />
                                }
                                else{
                                    <button class="btn btn-primary float-end" type="submit">Save</button>
                                }
                            </div>
                        </div>
                        <div class="card-footer">
                            <ValidationSummary />
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="col-lg-3"></div>
        </div>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await UserDetails();
        allState.Action += StateHasChanged;
        userProfileState.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
        userProfileState.Action -= StateHasChanged;

    }

    public bool ShowSpinner { get; set; } = false;
    private async Task UserDetails()
    {
        try
        {
            var client = await getHttpClient.GetPrivateHttpClient();
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            userProfileState.UserProfile.Id = authState.User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)!.Value;
            userProfileState.UserProfile.Name = authState.User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Name)!.Value;
            userProfileState.UserProfile.Email = authState.User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Email)!.Value;
            var response = await client.GetAsync($"api/authentication/user-image/{userProfileState.UserProfile.Id}");
            if (!response.IsSuccessStatusCode) return;

            var result = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(result)) return;
            else userProfileState.UserProfile.Image = result!;
        }
        catch 
        {}
    }
    async void UpdateProfile()
    {
        if (userProfileState.UserProfile.Image == "../images/profile/defaultProfile.png")
        {
            await dialogService.AlertAsync("Add Profile Image", "Alert!");
            return;
        }

        ShowSpinner = true;

        var client = await getHttpClient.GetPrivateHttpClient();
        var response = await client.PutAsJsonAsync("api/authentication/update-profile", userProfileState.UserProfile);
        if (response.IsSuccessStatusCode == false)
        {
            ShowSpinner = false;
            return;
        }
        var result = await response.Content.ReadFromJsonAsync<bool>();

        ShowSpinner = false;
        if (result)
        {
            await dialogService.AlertAsync("Profile updated", "Success");
            userProfileState.ProfileUpdated();
            await LogoutClicked();
        }
    }
    async void UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().EndsWith(".png"))
        {
            var format = "image/png";
            var resizeImg = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImg.Size];
            await resizeImg.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            userProfileState.UserProfile.Image = imageData;
            //StateHasChanged();
            imageData = "";
            return;
        }
        await dialogService.AlertAsync("PNG file needed", "Alert!");
        return;
    }

    private async Task LogoutClicked()
    {
        var logoutModel = new UserSession();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
        NavManager.NavigateTo("/identity/account/login", replace: true, forceLoad: true);
    }
}
