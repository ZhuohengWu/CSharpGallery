@implements IDisposable
@if (allState.ShowUser)
{
    <h2> some test</h2>
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Manage Users</h4>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Role</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (manageUser is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in manageUsers)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.UserId</td>
                                                <td>@item.Name</td>
                                                <td>@item.Email</td>
                                                <td>@item.Role</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" style="margin-right:10px" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">
                                                    No User registered yet!
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

<UserDialog @ref="userDialog"
            HandleSaveOperationEvent="handleSaveOperationEvent"
            ManageUser="manageUser" />
@code {
    UserDialog? userDialog;
    ManageUser manageUser = new();

    List<ManageUser> manageUsers = new();
    List<SystemRole> systemRoles { get; set; } = new();
    string title { get; set; } = "Add";

    protected override async void OnInitialized()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    private void OpenDialog()
    {
        userDialog?.OpenDialog();
    }

    private async Task GetUsers()
    {
        manageUsers = await accountService.GetUsersAsync();
        StateHasChanged();
    }

    private async Task GetRoles()
    {
        systemRoles = await accountService.GetRolesAsync();
        StateHasChanged();
    }

    private async Task handleSaveOperationEvent(ManageUser item)
    {
        bool successCk = false;

        var result = await accountService.UpdateUserAsync(item);
        successCk = await DisplayMessage(result.Flag, result.Message);
        
        if (successCk)
        {
            manageUser = new();
            await GetUsers();
        }
    }

    // private void AddClicked()
    // {
    //     countryDialog?.ChangeTitle("Add");
    //     country = new();
    //     OpenDialog();
    // }

    private void EditClicked(ManageUser item)
    {
        manageUser = item;
        OpenDialog();
    }

    private async void DeleteClicked(ManageUser item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure to delete {item.Name}", "Confirm Delete");
        if (!confirm) return;

        var result = await accountService.DeleteUserAsync(item.UserId);
        
        if (await DisplayMessage(result.Flag, result.Message))
            await GetUsers();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Operation Success");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert");
            return false;
        }
    }
}
