<div class="container-fluid">
    <div class="row">
        <div class="col-lg-2">
            <div class="card border-primary cursorStyle" @onclick="EmployeeClicked">
                <div class="card-header">
                    <i class="bi bi-people text-primary"></i> Employees
                    <span class="badge bg-primary fs-6"> @Employees.Count() </span>
                </div>
            </div>
        </div>
        <div class="col-lg-2">
            <div class="card border-success cursorStyle" @onclick="VacationClicked">
                <div class="card-header"><i class="bi bi-backpack3 text-success"></i> Vacation
                    <span class="badge bg-success fs-6"> @Vacations.Count() </span>
                </div>
            </div>
        </div>
        <div class="col-lg-2">
            <div class="card border-danger cursorStyle" @onclick="OvertimeClicked">
                <div class="card-header">
                    <i class="bi bi-stopwatch text-danger"></i> Overtime
                    <span class="badge bg-danger fs-6"> @Overtimes.Count() </span>
                </div>
            </div>
        </div>
        <div class="col-lg-2">
            <div class="card border-warning cursorStyle" @onclick="HealthClicked">
                <div class="card-header">
                    <i class="bi bi-hospital text-warning"></i> Health
                    <span class="badge bg-warning fs-6"> @Healths.Count() </span>
                </div>
            </div>
        </div>
        <div class="col-lg-2">
            <div class="card border-info cursorStyle" @onclick="SanctionClicked">
                <div class="card-header">
                    <i class="bi bi-x-octagon text-info"></i> Sanctions
                    <span class="badge bg-info fs-6"> @Sanctions.Count() </span>
                </div>
            </div>
        </div>
        <div class="col-lg-2">
            <div class="card border-dark cursorStyle" @onclick="DepartmentClicked">
                <div class="card-header">
                    <i class="bi bi-slack text-dark"></i> Departments
                    <span class="badge bg-dark fs-6"> @Departments.Count() </span>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public List<Employee> Employees { get; set; } = new();
    public List<Department> Departments { get; set; } = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<Sanction> Sanctions { get; set; } = new();
    public List<Vacation> Vacations { get; set; } = new();
    public List<Doctor> Healths { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadDefaults();
    }

    private async Task LoadDefaults()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
        Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);
        Vacations = await vacationService.GetAll(Constants.VacationBaseUrl);
        Healths = await doctorService.GetAll(Constants.DoctorBaseUrl);
    }

    void EmployeeClicked() => allState.EmployeeClicked();
    void HealthClicked() => allState.HealthClicked();
    void OvertimeClicked() => allState.OvertimeClicked();
    void SanctionClicked() => allState.SanctionClicked();
    void VacationClicked() => allState.VacationClicked();
    void DepartmentClicked() => allState.DepartmentClicked();

    public void Displose() => allState.Action -= StateHasChanged;
}